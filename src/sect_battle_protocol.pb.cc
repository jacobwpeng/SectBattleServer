// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sect_battle_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sect_battle_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SectBattle {

namespace {

const ::google::protobuf::Descriptor* ProtocolMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtocolMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBField_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleField_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryBattleFieldRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryBattleFieldRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryBattleFieldResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryBattleFieldResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinBattleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinBattleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinBattleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinBattleResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeSectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeSectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeSectResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeSectResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeOpponentRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeOpponentRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeOpponentResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeOpponentResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckFightRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckFightRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckFightResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckFightResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportFightRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportFightRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportFightResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportFightResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sect_5fbattle_5fprotocol_2eproto() {
  protobuf_AddDesc_sect_5fbattle_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sect_battle_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  ProtocolMessage_descriptor_ = file->message_type(0);
  static const int ProtocolMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolMessage, payload_),
  };
  ProtocolMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtocolMessage_descriptor_,
      ProtocolMessage::default_instance_,
      ProtocolMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtocolMessage));
  PBPos_descriptor_ = file->message_type(1);
  static const int PBPos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPos, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPos, y_),
  };
  PBPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPos_descriptor_,
      PBPos::default_instance_,
      PBPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPos));
  PBField_descriptor_ = file->message_type(2);
  static const int PBField_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBField, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBField, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBField, garrison_num_),
  };
  PBField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBField_descriptor_,
      PBField::default_instance_,
      PBField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBField));
  BattleField_descriptor_ = file->message_type(3);
  static const int BattleField_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleField, self_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleField, sect_members_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleField, field_),
  };
  BattleField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleField_descriptor_,
      BattleField::default_instance_,
      BattleField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleField));
  QueryBattleFieldRequest_descriptor_ = file->message_type(4);
  static const int QueryBattleFieldRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBattleFieldRequest, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBattleFieldRequest, level_),
  };
  QueryBattleFieldRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryBattleFieldRequest_descriptor_,
      QueryBattleFieldRequest::default_instance_,
      QueryBattleFieldRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBattleFieldRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBattleFieldRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryBattleFieldRequest));
  QueryBattleFieldResponse_descriptor_ = file->message_type(5);
  static const int QueryBattleFieldResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBattleFieldResponse, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBattleFieldResponse, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBattleFieldResponse, battle_field_),
  };
  QueryBattleFieldResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryBattleFieldResponse_descriptor_,
      QueryBattleFieldResponse::default_instance_,
      QueryBattleFieldResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBattleFieldResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBattleFieldResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryBattleFieldResponse));
  JoinBattleRequest_descriptor_ = file->message_type(6);
  static const int JoinBattleRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinBattleRequest, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinBattleRequest, level_),
  };
  JoinBattleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinBattleRequest_descriptor_,
      JoinBattleRequest::default_instance_,
      JoinBattleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinBattleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinBattleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinBattleRequest));
  JoinBattleResponse_descriptor_ = file->message_type(7);
  static const int JoinBattleResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinBattleResponse, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinBattleResponse, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinBattleResponse, sect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinBattleResponse, battle_field_),
  };
  JoinBattleResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinBattleResponse_descriptor_,
      JoinBattleResponse::default_instance_,
      JoinBattleResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinBattleResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinBattleResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinBattleResponse));
  MoveRequest_descriptor_ = file->message_type(8);
  static const int MoveRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRequest, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRequest, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRequest, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRequest, can_move_),
  };
  MoveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveRequest_descriptor_,
      MoveRequest::default_instance_,
      MoveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveRequest));
  MoveResponse_descriptor_ = file->message_type(9);
  static const int MoveResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveResponse, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveResponse, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveResponse, opponents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveResponse, battle_field_),
  };
  MoveResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveResponse_descriptor_,
      MoveResponse::default_instance_,
      MoveResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveResponse));
  ChangeSectRequest_descriptor_ = file->message_type(10);
  static const int ChangeSectRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSectRequest, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSectRequest, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSectRequest, sect_),
  };
  ChangeSectRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeSectRequest_descriptor_,
      ChangeSectRequest::default_instance_,
      ChangeSectRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSectRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSectRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeSectRequest));
  ChangeSectResponse_descriptor_ = file->message_type(11);
  static const int ChangeSectResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSectResponse, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSectResponse, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSectResponse, battle_field_),
  };
  ChangeSectResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeSectResponse_descriptor_,
      ChangeSectResponse::default_instance_,
      ChangeSectResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSectResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSectResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeSectResponse));
  ChangeOpponentRequest_descriptor_ = file->message_type(12);
  static const int ChangeOpponentRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeOpponentRequest, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeOpponentRequest, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeOpponentRequest, direction_),
  };
  ChangeOpponentRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeOpponentRequest_descriptor_,
      ChangeOpponentRequest::default_instance_,
      ChangeOpponentRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeOpponentRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeOpponentRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeOpponentRequest));
  ChangeOpponentResponse_descriptor_ = file->message_type(13);
  static const int ChangeOpponentResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeOpponentResponse, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeOpponentResponse, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeOpponentResponse, opponents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeOpponentResponse, battle_field_),
  };
  ChangeOpponentResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeOpponentResponse_descriptor_,
      ChangeOpponentResponse::default_instance_,
      ChangeOpponentResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeOpponentResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeOpponentResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeOpponentResponse));
  CheckFightRequest_descriptor_ = file->message_type(14);
  static const int CheckFightRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckFightRequest, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckFightRequest, opponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckFightRequest, direction_),
  };
  CheckFightRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckFightRequest_descriptor_,
      CheckFightRequest::default_instance_,
      CheckFightRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckFightRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckFightRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckFightRequest));
  CheckFightResponse_descriptor_ = file->message_type(15);
  static const int CheckFightResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckFightResponse, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckFightResponse, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckFightResponse, battle_field_),
  };
  CheckFightResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckFightResponse_descriptor_,
      CheckFightResponse::default_instance_,
      CheckFightResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckFightResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckFightResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckFightResponse));
  ReportFightRequest_descriptor_ = file->message_type(16);
  static const int ReportFightRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportFightRequest, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportFightRequest, opponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportFightRequest, loser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportFightRequest, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportFightRequest, reset_self_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportFightRequest, reset_opponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportFightRequest, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportFightRequest, opponent_level_),
  };
  ReportFightRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportFightRequest_descriptor_,
      ReportFightRequest::default_instance_,
      ReportFightRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportFightRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportFightRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportFightRequest));
  ReportFightResponse_descriptor_ = file->message_type(17);
  static const int ReportFightResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportFightResponse, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportFightResponse, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportFightResponse, battle_field_),
  };
  ReportFightResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportFightResponse_descriptor_,
      ReportFightResponse::default_instance_,
      ReportFightResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportFightResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportFightResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportFightResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sect_5fbattle_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtocolMessage_descriptor_, &ProtocolMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPos_descriptor_, &PBPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBField_descriptor_, &PBField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleField_descriptor_, &BattleField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryBattleFieldRequest_descriptor_, &QueryBattleFieldRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryBattleFieldResponse_descriptor_, &QueryBattleFieldResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinBattleRequest_descriptor_, &JoinBattleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinBattleResponse_descriptor_, &JoinBattleResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveRequest_descriptor_, &MoveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveResponse_descriptor_, &MoveResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeSectRequest_descriptor_, &ChangeSectRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeSectResponse_descriptor_, &ChangeSectResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeOpponentRequest_descriptor_, &ChangeOpponentRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeOpponentResponse_descriptor_, &ChangeOpponentResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckFightRequest_descriptor_, &CheckFightRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckFightResponse_descriptor_, &CheckFightResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportFightRequest_descriptor_, &ReportFightRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportFightResponse_descriptor_, &ReportFightResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sect_5fbattle_5fprotocol_2eproto() {
  delete ProtocolMessage::default_instance_;
  delete ProtocolMessage_reflection_;
  delete PBPos::default_instance_;
  delete PBPos_reflection_;
  delete PBField::default_instance_;
  delete PBField_reflection_;
  delete BattleField::default_instance_;
  delete BattleField_reflection_;
  delete QueryBattleFieldRequest::default_instance_;
  delete QueryBattleFieldRequest_reflection_;
  delete QueryBattleFieldResponse::default_instance_;
  delete QueryBattleFieldResponse_reflection_;
  delete JoinBattleRequest::default_instance_;
  delete JoinBattleRequest_reflection_;
  delete JoinBattleResponse::default_instance_;
  delete JoinBattleResponse_reflection_;
  delete MoveRequest::default_instance_;
  delete MoveRequest_reflection_;
  delete MoveResponse::default_instance_;
  delete MoveResponse_reflection_;
  delete ChangeSectRequest::default_instance_;
  delete ChangeSectRequest_reflection_;
  delete ChangeSectResponse::default_instance_;
  delete ChangeSectResponse_reflection_;
  delete ChangeOpponentRequest::default_instance_;
  delete ChangeOpponentRequest_reflection_;
  delete ChangeOpponentResponse::default_instance_;
  delete ChangeOpponentResponse_reflection_;
  delete CheckFightRequest::default_instance_;
  delete CheckFightRequest_reflection_;
  delete CheckFightResponse::default_instance_;
  delete CheckFightResponse_reflection_;
  delete ReportFightRequest::default_instance_;
  delete ReportFightRequest_reflection_;
  delete ReportFightResponse::default_instance_;
  delete ReportFightResponse_reflection_;
}

void protobuf_AddDesc_sect_5fbattle_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032sect_battle_protocol.proto\022\nSectBattle"
    "\"0\n\017ProtocolMessage\022\014\n\004name\030\001 \001(\014\022\017\n\007pay"
    "load\030\002 \001(\014\"\035\n\005PBPos\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002("
    "\005\"N\n\007PBField\022\036\n\003pos\030\001 \001(\0132\021.SectBattle.P"
    "BPos\022\r\n\005owner\030\002 \001(\r\022\024\n\014garrison_num\030\003 \001("
    "\r\"w\n\013BattleField\022(\n\rself_position\030\001 \001(\0132"
    "\021.SectBattle.PBPos\022\032\n\022sect_members_count"
    "\030\002 \003(\r\022\"\n\005field\030\003 \003(\0132\023.SectBattle.PBFie"
    "ld\"5\n\027QueryBattleFieldRequest\022\013\n\003uin\030\001 \001"
    "(\r\022\r\n\005level\030\002 \001(\r\"d\n\030QueryBattleFieldRes"
    "ponse\022\013\n\003uin\030\001 \001(\r\022\014\n\004code\030\002 \001(\021\022-\n\014batt"
    "le_field\030\003 \001(\0132\027.SectBattle.BattleField\""
    "/\n\021JoinBattleRequest\022\013\n\003uin\030\001 \001(\r\022\r\n\005lev"
    "el\030\002 \001(\r\"l\n\022JoinBattleResponse\022\013\n\003uin\030\001 "
    "\001(\r\022\014\n\004code\030\002 \001(\021\022\014\n\004sect\030\003 \001(\r\022-\n\014battl"
    "e_field\030\004 \001(\0132\027.SectBattle.BattleField\"N"
    "\n\013MoveRequest\022\013\n\003uin\030\001 \001(\r\022\r\n\005level\030\002 \001("
    "\r\022\021\n\tdirection\030\003 \001(\r\022\020\n\010can_move\030\004 \001(\010\"k"
    "\n\014MoveResponse\022\013\n\003uin\030\001 \001(\r\022\014\n\004code\030\002 \001("
    "\021\022\021\n\topponents\030\003 \003(\r\022-\n\014battle_field\030\004 \001"
    "(\0132\027.SectBattle.BattleField\"=\n\021ChangeSec"
    "tRequest\022\013\n\003uin\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\022\014\n\004"
    "sect\030\003 \001(\r\"^\n\022ChangeSectResponse\022\013\n\003uin\030"
    "\001 \001(\r\022\014\n\004code\030\002 \001(\021\022-\n\014battle_field\030\003 \001("
    "\0132\027.SectBattle.BattleField\"F\n\025ChangeOppo"
    "nentRequest\022\013\n\003uin\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\022"
    "\021\n\tdirection\030\003 \001(\r\"u\n\026ChangeOpponentResp"
    "onse\022\013\n\003uin\030\001 \001(\r\022\014\n\004code\030\002 \001(\021\022\021\n\toppon"
    "ents\030\003 \003(\r\022-\n\014battle_field\030\004 \001(\0132\027.SectB"
    "attle.BattleField\"E\n\021CheckFightRequest\022\013"
    "\n\003uin\030\001 \001(\r\022\020\n\010opponent\030\002 \001(\r\022\021\n\tdirecti"
    "on\030\003 \001(\r\"^\n\022CheckFightResponse\022\013\n\003uin\030\001 "
    "\001(\r\022\014\n\004code\030\002 \001(\021\022-\n\014battle_field\030\003 \001(\0132"
    "\027.SectBattle.BattleField\"\250\001\n\022ReportFight"
    "Request\022\013\n\003uin\030\001 \001(\r\022\020\n\010opponent\030\002 \001(\r\022\r"
    "\n\005loser\030\003 \001(\r\022\021\n\tdirection\030\004 \001(\r\022\022\n\nrese"
    "t_self\030\005 \001(\010\022\026\n\016reset_opponent\030\006 \001(\010\022\r\n\005"
    "level\030\007 \001(\r\022\026\n\016opponent_level\030\010 \001(\r\"_\n\023R"
    "eportFightResponse\022\013\n\003uin\030\001 \001(\r\022\014\n\004code\030"
    "\002 \001(\r\022-\n\014battle_field\030\003 \001(\0132\027.SectBattle"
    ".BattleField", 1612);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sect_battle_protocol.proto", &protobuf_RegisterTypes);
  ProtocolMessage::default_instance_ = new ProtocolMessage();
  PBPos::default_instance_ = new PBPos();
  PBField::default_instance_ = new PBField();
  BattleField::default_instance_ = new BattleField();
  QueryBattleFieldRequest::default_instance_ = new QueryBattleFieldRequest();
  QueryBattleFieldResponse::default_instance_ = new QueryBattleFieldResponse();
  JoinBattleRequest::default_instance_ = new JoinBattleRequest();
  JoinBattleResponse::default_instance_ = new JoinBattleResponse();
  MoveRequest::default_instance_ = new MoveRequest();
  MoveResponse::default_instance_ = new MoveResponse();
  ChangeSectRequest::default_instance_ = new ChangeSectRequest();
  ChangeSectResponse::default_instance_ = new ChangeSectResponse();
  ChangeOpponentRequest::default_instance_ = new ChangeOpponentRequest();
  ChangeOpponentResponse::default_instance_ = new ChangeOpponentResponse();
  CheckFightRequest::default_instance_ = new CheckFightRequest();
  CheckFightResponse::default_instance_ = new CheckFightResponse();
  ReportFightRequest::default_instance_ = new ReportFightRequest();
  ReportFightResponse::default_instance_ = new ReportFightResponse();
  ProtocolMessage::default_instance_->InitAsDefaultInstance();
  PBPos::default_instance_->InitAsDefaultInstance();
  PBField::default_instance_->InitAsDefaultInstance();
  BattleField::default_instance_->InitAsDefaultInstance();
  QueryBattleFieldRequest::default_instance_->InitAsDefaultInstance();
  QueryBattleFieldResponse::default_instance_->InitAsDefaultInstance();
  JoinBattleRequest::default_instance_->InitAsDefaultInstance();
  JoinBattleResponse::default_instance_->InitAsDefaultInstance();
  MoveRequest::default_instance_->InitAsDefaultInstance();
  MoveResponse::default_instance_->InitAsDefaultInstance();
  ChangeSectRequest::default_instance_->InitAsDefaultInstance();
  ChangeSectResponse::default_instance_->InitAsDefaultInstance();
  ChangeOpponentRequest::default_instance_->InitAsDefaultInstance();
  ChangeOpponentResponse::default_instance_->InitAsDefaultInstance();
  CheckFightRequest::default_instance_->InitAsDefaultInstance();
  CheckFightResponse::default_instance_->InitAsDefaultInstance();
  ReportFightRequest::default_instance_->InitAsDefaultInstance();
  ReportFightResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sect_5fbattle_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sect_5fbattle_5fprotocol_2eproto {
  StaticDescriptorInitializer_sect_5fbattle_5fprotocol_2eproto() {
    protobuf_AddDesc_sect_5fbattle_5fprotocol_2eproto();
  }
} static_descriptor_initializer_sect_5fbattle_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProtocolMessage::kNameFieldNumber;
const int ProtocolMessage::kPayloadFieldNumber;
#endif  // !_MSC_VER

ProtocolMessage::ProtocolMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtocolMessage::InitAsDefaultInstance() {
}

ProtocolMessage::ProtocolMessage(const ProtocolMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtocolMessage::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtocolMessage::~ProtocolMessage() {
  SharedDtor();
}

void ProtocolMessage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void ProtocolMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtocolMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtocolMessage_descriptor_;
}

const ProtocolMessage& ProtocolMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sect_5fbattle_5fprotocol_2eproto();
  return *default_instance_;
}

ProtocolMessage* ProtocolMessage::default_instance_ = NULL;

ProtocolMessage* ProtocolMessage::New() const {
  return new ProtocolMessage;
}

void ProtocolMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtocolMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }

      // optional bytes payload = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtocolMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional bytes payload = 2;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->payload(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtocolMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional bytes payload = 2;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtocolMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes payload = 2;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtocolMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtocolMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtocolMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtocolMessage::MergeFrom(const ProtocolMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtocolMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolMessage::CopyFrom(const ProtocolMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolMessage::IsInitialized() const {

  return true;
}

void ProtocolMessage::Swap(ProtocolMessage* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtocolMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtocolMessage_descriptor_;
  metadata.reflection = ProtocolMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPos::kXFieldNumber;
const int PBPos::kYFieldNumber;
#endif  // !_MSC_VER

PBPos::PBPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPos::InitAsDefaultInstance() {
}

PBPos::PBPos(const PBPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPos::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPos::~PBPos() {
  SharedDtor();
}

void PBPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPos_descriptor_;
}

const PBPos& PBPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sect_5fbattle_5fprotocol_2eproto();
  return *default_instance_;
}

PBPos* PBPos::default_instance_ = NULL;

PBPos* PBPos::New() const {
  return new PBPos;
}

void PBPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPos::MergeFrom(const PBPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPos::CopyFrom(const PBPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PBPos::Swap(PBPos* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPos_descriptor_;
  metadata.reflection = PBPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBField::kPosFieldNumber;
const int PBField::kOwnerFieldNumber;
const int PBField::kGarrisonNumFieldNumber;
#endif  // !_MSC_VER

PBField::PBField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBField::InitAsDefaultInstance() {
  pos_ = const_cast< ::SectBattle::PBPos*>(&::SectBattle::PBPos::default_instance());
}

PBField::PBField(const PBField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBField::SharedCtor() {
  _cached_size_ = 0;
  pos_ = NULL;
  owner_ = 0u;
  garrison_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBField::~PBField() {
  SharedDtor();
}

void PBField::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void PBField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBField_descriptor_;
}

const PBField& PBField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sect_5fbattle_5fprotocol_2eproto();
  return *default_instance_;
}

PBField* PBField::default_instance_ = NULL;

PBField* PBField::New() const {
  return new PBField;
}

void PBField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pos()) {
      if (pos_ != NULL) pos_->::SectBattle::PBPos::Clear();
    }
    owner_ = 0u;
    garrison_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SectBattle.PBPos pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_owner;
        break;
      }

      // optional uint32 owner = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_garrison_num;
        break;
      }

      // optional uint32 garrison_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_garrison_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &garrison_num_)));
          set_has_garrison_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SectBattle.PBPos pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pos(), output);
  }

  // optional uint32 owner = 2;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner(), output);
  }

  // optional uint32 garrison_num = 3;
  if (has_garrison_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->garrison_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SectBattle.PBPos pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pos(), target);
  }

  // optional uint32 owner = 2;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner(), target);
  }

  // optional uint32 garrison_num = 3;
  if (has_garrison_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->garrison_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBField::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SectBattle.PBPos pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint32 owner = 2;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner());
    }

    // optional uint32 garrison_num = 3;
    if (has_garrison_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->garrison_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBField::MergeFrom(const PBField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      mutable_pos()->::SectBattle::PBPos::MergeFrom(from.pos());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_garrison_num()) {
      set_garrison_num(from.garrison_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBField::CopyFrom(const PBField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBField::IsInitialized() const {

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void PBField::Swap(PBField* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(owner_, other->owner_);
    std::swap(garrison_num_, other->garrison_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBField_descriptor_;
  metadata.reflection = PBField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleField::kSelfPositionFieldNumber;
const int BattleField::kSectMembersCountFieldNumber;
const int BattleField::kFieldFieldNumber;
#endif  // !_MSC_VER

BattleField::BattleField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleField::InitAsDefaultInstance() {
  self_position_ = const_cast< ::SectBattle::PBPos*>(&::SectBattle::PBPos::default_instance());
}

BattleField::BattleField(const BattleField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleField::SharedCtor() {
  _cached_size_ = 0;
  self_position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleField::~BattleField() {
  SharedDtor();
}

void BattleField::SharedDtor() {
  if (this != default_instance_) {
    delete self_position_;
  }
}

void BattleField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleField_descriptor_;
}

const BattleField& BattleField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sect_5fbattle_5fprotocol_2eproto();
  return *default_instance_;
}

BattleField* BattleField::default_instance_ = NULL;

BattleField* BattleField::New() const {
  return new BattleField;
}

void BattleField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_self_position()) {
      if (self_position_ != NULL) self_position_->::SectBattle::PBPos::Clear();
    }
  }
  sect_members_count_.Clear();
  field_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SectBattle.PBPos self_position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sect_members_count;
        break;
      }

      // repeated uint32 sect_members_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sect_members_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_sect_members_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sect_members_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sect_members_count;
        if (input->ExpectTag(26)) goto parse_field;
        break;
      }

      // repeated .SectBattle.PBField field = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_field()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_field;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SectBattle.PBPos self_position = 1;
  if (has_self_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->self_position(), output);
  }

  // repeated uint32 sect_members_count = 2;
  for (int i = 0; i < this->sect_members_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->sect_members_count(i), output);
  }

  // repeated .SectBattle.PBField field = 3;
  for (int i = 0; i < this->field_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->field(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SectBattle.PBPos self_position = 1;
  if (has_self_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->self_position(), target);
  }

  // repeated uint32 sect_members_count = 2;
  for (int i = 0; i < this->sect_members_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->sect_members_count(i), target);
  }

  // repeated .SectBattle.PBField field = 3;
  for (int i = 0; i < this->field_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->field(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleField::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SectBattle.PBPos self_position = 1;
    if (has_self_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self_position());
    }

  }
  // repeated uint32 sect_members_count = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->sect_members_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->sect_members_count(i));
    }
    total_size += 1 * this->sect_members_count_size() + data_size;
  }

  // repeated .SectBattle.PBField field = 3;
  total_size += 1 * this->field_size();
  for (int i = 0; i < this->field_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->field(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleField::MergeFrom(const BattleField& from) {
  GOOGLE_CHECK_NE(&from, this);
  sect_members_count_.MergeFrom(from.sect_members_count_);
  field_.MergeFrom(from.field_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_self_position()) {
      mutable_self_position()->::SectBattle::PBPos::MergeFrom(from.self_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleField::CopyFrom(const BattleField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleField::IsInitialized() const {

  if (has_self_position()) {
    if (!this->self_position().IsInitialized()) return false;
  }
  for (int i = 0; i < field_size(); i++) {
    if (!this->field(i).IsInitialized()) return false;
  }
  return true;
}

void BattleField::Swap(BattleField* other) {
  if (other != this) {
    std::swap(self_position_, other->self_position_);
    sect_members_count_.Swap(&other->sect_members_count_);
    field_.Swap(&other->field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleField_descriptor_;
  metadata.reflection = BattleField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryBattleFieldRequest::kUinFieldNumber;
const int QueryBattleFieldRequest::kLevelFieldNumber;
#endif  // !_MSC_VER

QueryBattleFieldRequest::QueryBattleFieldRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryBattleFieldRequest::InitAsDefaultInstance() {
}

QueryBattleFieldRequest::QueryBattleFieldRequest(const QueryBattleFieldRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryBattleFieldRequest::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryBattleFieldRequest::~QueryBattleFieldRequest() {
  SharedDtor();
}

void QueryBattleFieldRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryBattleFieldRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryBattleFieldRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryBattleFieldRequest_descriptor_;
}

const QueryBattleFieldRequest& QueryBattleFieldRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sect_5fbattle_5fprotocol_2eproto();
  return *default_instance_;
}

QueryBattleFieldRequest* QueryBattleFieldRequest::default_instance_ = NULL;

QueryBattleFieldRequest* QueryBattleFieldRequest::New() const {
  return new QueryBattleFieldRequest;
}

void QueryBattleFieldRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryBattleFieldRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryBattleFieldRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryBattleFieldRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryBattleFieldRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryBattleFieldRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryBattleFieldRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryBattleFieldRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryBattleFieldRequest::MergeFrom(const QueryBattleFieldRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryBattleFieldRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryBattleFieldRequest::CopyFrom(const QueryBattleFieldRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBattleFieldRequest::IsInitialized() const {

  return true;
}

void QueryBattleFieldRequest::Swap(QueryBattleFieldRequest* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryBattleFieldRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryBattleFieldRequest_descriptor_;
  metadata.reflection = QueryBattleFieldRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryBattleFieldResponse::kUinFieldNumber;
const int QueryBattleFieldResponse::kCodeFieldNumber;
const int QueryBattleFieldResponse::kBattleFieldFieldNumber;
#endif  // !_MSC_VER

QueryBattleFieldResponse::QueryBattleFieldResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryBattleFieldResponse::InitAsDefaultInstance() {
  battle_field_ = const_cast< ::SectBattle::BattleField*>(&::SectBattle::BattleField::default_instance());
}

QueryBattleFieldResponse::QueryBattleFieldResponse(const QueryBattleFieldResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryBattleFieldResponse::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  code_ = 0;
  battle_field_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryBattleFieldResponse::~QueryBattleFieldResponse() {
  SharedDtor();
}

void QueryBattleFieldResponse::SharedDtor() {
  if (this != default_instance_) {
    delete battle_field_;
  }
}

void QueryBattleFieldResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryBattleFieldResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryBattleFieldResponse_descriptor_;
}

const QueryBattleFieldResponse& QueryBattleFieldResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sect_5fbattle_5fprotocol_2eproto();
  return *default_instance_;
}

QueryBattleFieldResponse* QueryBattleFieldResponse::default_instance_ = NULL;

QueryBattleFieldResponse* QueryBattleFieldResponse::New() const {
  return new QueryBattleFieldResponse;
}

void QueryBattleFieldResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    code_ = 0;
    if (has_battle_field()) {
      if (battle_field_ != NULL) battle_field_->::SectBattle::BattleField::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryBattleFieldResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional sint32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_battle_field;
        break;
      }

      // optional .SectBattle.BattleField battle_field = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_field()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryBattleFieldResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional sint32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->code(), output);
  }

  // optional .SectBattle.BattleField battle_field = 3;
  if (has_battle_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battle_field(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryBattleFieldResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional sint32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->code(), target);
  }

  // optional .SectBattle.BattleField battle_field = 3;
  if (has_battle_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battle_field(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryBattleFieldResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional sint32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->code());
    }

    // optional .SectBattle.BattleField battle_field = 3;
    if (has_battle_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_field());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryBattleFieldResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryBattleFieldResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryBattleFieldResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryBattleFieldResponse::MergeFrom(const QueryBattleFieldResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_battle_field()) {
      mutable_battle_field()->::SectBattle::BattleField::MergeFrom(from.battle_field());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryBattleFieldResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryBattleFieldResponse::CopyFrom(const QueryBattleFieldResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBattleFieldResponse::IsInitialized() const {

  if (has_battle_field()) {
    if (!this->battle_field().IsInitialized()) return false;
  }
  return true;
}

void QueryBattleFieldResponse::Swap(QueryBattleFieldResponse* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(code_, other->code_);
    std::swap(battle_field_, other->battle_field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryBattleFieldResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryBattleFieldResponse_descriptor_;
  metadata.reflection = QueryBattleFieldResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinBattleRequest::kUinFieldNumber;
const int JoinBattleRequest::kLevelFieldNumber;
#endif  // !_MSC_VER

JoinBattleRequest::JoinBattleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinBattleRequest::InitAsDefaultInstance() {
}

JoinBattleRequest::JoinBattleRequest(const JoinBattleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinBattleRequest::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinBattleRequest::~JoinBattleRequest() {
  SharedDtor();
}

void JoinBattleRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JoinBattleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinBattleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinBattleRequest_descriptor_;
}

const JoinBattleRequest& JoinBattleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sect_5fbattle_5fprotocol_2eproto();
  return *default_instance_;
}

JoinBattleRequest* JoinBattleRequest::default_instance_ = NULL;

JoinBattleRequest* JoinBattleRequest::New() const {
  return new JoinBattleRequest;
}

void JoinBattleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinBattleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinBattleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinBattleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinBattleRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinBattleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinBattleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinBattleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinBattleRequest::MergeFrom(const JoinBattleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinBattleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinBattleRequest::CopyFrom(const JoinBattleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinBattleRequest::IsInitialized() const {

  return true;
}

void JoinBattleRequest::Swap(JoinBattleRequest* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinBattleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinBattleRequest_descriptor_;
  metadata.reflection = JoinBattleRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinBattleResponse::kUinFieldNumber;
const int JoinBattleResponse::kCodeFieldNumber;
const int JoinBattleResponse::kSectFieldNumber;
const int JoinBattleResponse::kBattleFieldFieldNumber;
#endif  // !_MSC_VER

JoinBattleResponse::JoinBattleResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinBattleResponse::InitAsDefaultInstance() {
  battle_field_ = const_cast< ::SectBattle::BattleField*>(&::SectBattle::BattleField::default_instance());
}

JoinBattleResponse::JoinBattleResponse(const JoinBattleResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinBattleResponse::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  code_ = 0;
  sect_ = 0u;
  battle_field_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinBattleResponse::~JoinBattleResponse() {
  SharedDtor();
}

void JoinBattleResponse::SharedDtor() {
  if (this != default_instance_) {
    delete battle_field_;
  }
}

void JoinBattleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinBattleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinBattleResponse_descriptor_;
}

const JoinBattleResponse& JoinBattleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sect_5fbattle_5fprotocol_2eproto();
  return *default_instance_;
}

JoinBattleResponse* JoinBattleResponse::default_instance_ = NULL;

JoinBattleResponse* JoinBattleResponse::New() const {
  return new JoinBattleResponse;
}

void JoinBattleResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    code_ = 0;
    sect_ = 0u;
    if (has_battle_field()) {
      if (battle_field_ != NULL) battle_field_->::SectBattle::BattleField::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinBattleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional sint32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sect;
        break;
      }

      // optional uint32 sect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sect_)));
          set_has_sect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_battle_field;
        break;
      }

      // optional .SectBattle.BattleField battle_field = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_field()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinBattleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional sint32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->code(), output);
  }

  // optional uint32 sect = 3;
  if (has_sect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sect(), output);
  }

  // optional .SectBattle.BattleField battle_field = 4;
  if (has_battle_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->battle_field(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinBattleResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional sint32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->code(), target);
  }

  // optional uint32 sect = 3;
  if (has_sect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sect(), target);
  }

  // optional .SectBattle.BattleField battle_field = 4;
  if (has_battle_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->battle_field(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinBattleResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional sint32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->code());
    }

    // optional uint32 sect = 3;
    if (has_sect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sect());
    }

    // optional .SectBattle.BattleField battle_field = 4;
    if (has_battle_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_field());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinBattleResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinBattleResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinBattleResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinBattleResponse::MergeFrom(const JoinBattleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_sect()) {
      set_sect(from.sect());
    }
    if (from.has_battle_field()) {
      mutable_battle_field()->::SectBattle::BattleField::MergeFrom(from.battle_field());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinBattleResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinBattleResponse::CopyFrom(const JoinBattleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinBattleResponse::IsInitialized() const {

  if (has_battle_field()) {
    if (!this->battle_field().IsInitialized()) return false;
  }
  return true;
}

void JoinBattleResponse::Swap(JoinBattleResponse* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(code_, other->code_);
    std::swap(sect_, other->sect_);
    std::swap(battle_field_, other->battle_field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinBattleResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinBattleResponse_descriptor_;
  metadata.reflection = JoinBattleResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveRequest::kUinFieldNumber;
const int MoveRequest::kLevelFieldNumber;
const int MoveRequest::kDirectionFieldNumber;
const int MoveRequest::kCanMoveFieldNumber;
#endif  // !_MSC_VER

MoveRequest::MoveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveRequest::InitAsDefaultInstance() {
}

MoveRequest::MoveRequest(const MoveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveRequest::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  level_ = 0u;
  direction_ = 0u;
  can_move_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveRequest::~MoveRequest() {
  SharedDtor();
}

void MoveRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveRequest_descriptor_;
}

const MoveRequest& MoveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sect_5fbattle_5fprotocol_2eproto();
  return *default_instance_;
}

MoveRequest* MoveRequest::default_instance_ = NULL;

MoveRequest* MoveRequest::New() const {
  return new MoveRequest;
}

void MoveRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    level_ = 0u;
    direction_ = 0u;
    can_move_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_direction;
        break;
      }

      // optional uint32 direction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_can_move;
        break;
      }

      // optional bool can_move = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_move:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_move_)));
          set_has_can_move();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->direction(), output);
  }

  // optional bool can_move = 4;
  if (has_can_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->can_move(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->direction(), target);
  }

  // optional bool can_move = 4;
  if (has_can_move()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->can_move(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 direction = 3;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->direction());
    }

    // optional bool can_move = 4;
    if (has_can_move()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveRequest::MergeFrom(const MoveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_can_move()) {
      set_can_move(from.can_move());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveRequest::CopyFrom(const MoveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveRequest::IsInitialized() const {

  return true;
}

void MoveRequest::Swap(MoveRequest* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(level_, other->level_);
    std::swap(direction_, other->direction_);
    std::swap(can_move_, other->can_move_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveRequest_descriptor_;
  metadata.reflection = MoveRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveResponse::kUinFieldNumber;
const int MoveResponse::kCodeFieldNumber;
const int MoveResponse::kOpponentsFieldNumber;
const int MoveResponse::kBattleFieldFieldNumber;
#endif  // !_MSC_VER

MoveResponse::MoveResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveResponse::InitAsDefaultInstance() {
  battle_field_ = const_cast< ::SectBattle::BattleField*>(&::SectBattle::BattleField::default_instance());
}

MoveResponse::MoveResponse(const MoveResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveResponse::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  code_ = 0;
  battle_field_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveResponse::~MoveResponse() {
  SharedDtor();
}

void MoveResponse::SharedDtor() {
  if (this != default_instance_) {
    delete battle_field_;
  }
}

void MoveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveResponse_descriptor_;
}

const MoveResponse& MoveResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sect_5fbattle_5fprotocol_2eproto();
  return *default_instance_;
}

MoveResponse* MoveResponse::default_instance_ = NULL;

MoveResponse* MoveResponse::New() const {
  return new MoveResponse;
}

void MoveResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    code_ = 0;
    if (has_battle_field()) {
      if (battle_field_ != NULL) battle_field_->::SectBattle::BattleField::Clear();
    }
  }
  opponents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional sint32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opponents;
        break;
      }

      // repeated uint32 opponents = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opponents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_opponents())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_opponents())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opponents;
        if (input->ExpectTag(34)) goto parse_battle_field;
        break;
      }

      // optional .SectBattle.BattleField battle_field = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_field()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional sint32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->code(), output);
  }

  // repeated uint32 opponents = 3;
  for (int i = 0; i < this->opponents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->opponents(i), output);
  }

  // optional .SectBattle.BattleField battle_field = 4;
  if (has_battle_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->battle_field(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional sint32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->code(), target);
  }

  // repeated uint32 opponents = 3;
  for (int i = 0; i < this->opponents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->opponents(i), target);
  }

  // optional .SectBattle.BattleField battle_field = 4;
  if (has_battle_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->battle_field(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional sint32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->code());
    }

    // optional .SectBattle.BattleField battle_field = 4;
    if (has_battle_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_field());
    }

  }
  // repeated uint32 opponents = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->opponents_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->opponents(i));
    }
    total_size += 1 * this->opponents_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveResponse::MergeFrom(const MoveResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  opponents_.MergeFrom(from.opponents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_battle_field()) {
      mutable_battle_field()->::SectBattle::BattleField::MergeFrom(from.battle_field());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveResponse::CopyFrom(const MoveResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveResponse::IsInitialized() const {

  if (has_battle_field()) {
    if (!this->battle_field().IsInitialized()) return false;
  }
  return true;
}

void MoveResponse::Swap(MoveResponse* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(code_, other->code_);
    opponents_.Swap(&other->opponents_);
    std::swap(battle_field_, other->battle_field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveResponse_descriptor_;
  metadata.reflection = MoveResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeSectRequest::kUinFieldNumber;
const int ChangeSectRequest::kLevelFieldNumber;
const int ChangeSectRequest::kSectFieldNumber;
#endif  // !_MSC_VER

ChangeSectRequest::ChangeSectRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeSectRequest::InitAsDefaultInstance() {
}

ChangeSectRequest::ChangeSectRequest(const ChangeSectRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeSectRequest::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  level_ = 0u;
  sect_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeSectRequest::~ChangeSectRequest() {
  SharedDtor();
}

void ChangeSectRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeSectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeSectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeSectRequest_descriptor_;
}

const ChangeSectRequest& ChangeSectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sect_5fbattle_5fprotocol_2eproto();
  return *default_instance_;
}

ChangeSectRequest* ChangeSectRequest::default_instance_ = NULL;

ChangeSectRequest* ChangeSectRequest::New() const {
  return new ChangeSectRequest;
}

void ChangeSectRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    level_ = 0u;
    sect_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeSectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sect;
        break;
      }

      // optional uint32 sect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sect_)));
          set_has_sect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeSectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 sect = 3;
  if (has_sect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeSectRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 sect = 3;
  if (has_sect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeSectRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 sect = 3;
    if (has_sect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeSectRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeSectRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeSectRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeSectRequest::MergeFrom(const ChangeSectRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_sect()) {
      set_sect(from.sect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeSectRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeSectRequest::CopyFrom(const ChangeSectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeSectRequest::IsInitialized() const {

  return true;
}

void ChangeSectRequest::Swap(ChangeSectRequest* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(level_, other->level_);
    std::swap(sect_, other->sect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeSectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeSectRequest_descriptor_;
  metadata.reflection = ChangeSectRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeSectResponse::kUinFieldNumber;
const int ChangeSectResponse::kCodeFieldNumber;
const int ChangeSectResponse::kBattleFieldFieldNumber;
#endif  // !_MSC_VER

ChangeSectResponse::ChangeSectResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeSectResponse::InitAsDefaultInstance() {
  battle_field_ = const_cast< ::SectBattle::BattleField*>(&::SectBattle::BattleField::default_instance());
}

ChangeSectResponse::ChangeSectResponse(const ChangeSectResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeSectResponse::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  code_ = 0;
  battle_field_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeSectResponse::~ChangeSectResponse() {
  SharedDtor();
}

void ChangeSectResponse::SharedDtor() {
  if (this != default_instance_) {
    delete battle_field_;
  }
}

void ChangeSectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeSectResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeSectResponse_descriptor_;
}

const ChangeSectResponse& ChangeSectResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sect_5fbattle_5fprotocol_2eproto();
  return *default_instance_;
}

ChangeSectResponse* ChangeSectResponse::default_instance_ = NULL;

ChangeSectResponse* ChangeSectResponse::New() const {
  return new ChangeSectResponse;
}

void ChangeSectResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    code_ = 0;
    if (has_battle_field()) {
      if (battle_field_ != NULL) battle_field_->::SectBattle::BattleField::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeSectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional sint32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_battle_field;
        break;
      }

      // optional .SectBattle.BattleField battle_field = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_field()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeSectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional sint32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->code(), output);
  }

  // optional .SectBattle.BattleField battle_field = 3;
  if (has_battle_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battle_field(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeSectResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional sint32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->code(), target);
  }

  // optional .SectBattle.BattleField battle_field = 3;
  if (has_battle_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battle_field(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeSectResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional sint32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->code());
    }

    // optional .SectBattle.BattleField battle_field = 3;
    if (has_battle_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_field());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeSectResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeSectResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeSectResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeSectResponse::MergeFrom(const ChangeSectResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_battle_field()) {
      mutable_battle_field()->::SectBattle::BattleField::MergeFrom(from.battle_field());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeSectResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeSectResponse::CopyFrom(const ChangeSectResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeSectResponse::IsInitialized() const {

  if (has_battle_field()) {
    if (!this->battle_field().IsInitialized()) return false;
  }
  return true;
}

void ChangeSectResponse::Swap(ChangeSectResponse* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(code_, other->code_);
    std::swap(battle_field_, other->battle_field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeSectResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeSectResponse_descriptor_;
  metadata.reflection = ChangeSectResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeOpponentRequest::kUinFieldNumber;
const int ChangeOpponentRequest::kLevelFieldNumber;
const int ChangeOpponentRequest::kDirectionFieldNumber;
#endif  // !_MSC_VER

ChangeOpponentRequest::ChangeOpponentRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeOpponentRequest::InitAsDefaultInstance() {
}

ChangeOpponentRequest::ChangeOpponentRequest(const ChangeOpponentRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeOpponentRequest::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  level_ = 0u;
  direction_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeOpponentRequest::~ChangeOpponentRequest() {
  SharedDtor();
}

void ChangeOpponentRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeOpponentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeOpponentRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeOpponentRequest_descriptor_;
}

const ChangeOpponentRequest& ChangeOpponentRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sect_5fbattle_5fprotocol_2eproto();
  return *default_instance_;
}

ChangeOpponentRequest* ChangeOpponentRequest::default_instance_ = NULL;

ChangeOpponentRequest* ChangeOpponentRequest::New() const {
  return new ChangeOpponentRequest;
}

void ChangeOpponentRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    level_ = 0u;
    direction_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeOpponentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_direction;
        break;
      }

      // optional uint32 direction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeOpponentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->direction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeOpponentRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->direction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeOpponentRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 direction = 3;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->direction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeOpponentRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeOpponentRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeOpponentRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeOpponentRequest::MergeFrom(const ChangeOpponentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeOpponentRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeOpponentRequest::CopyFrom(const ChangeOpponentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeOpponentRequest::IsInitialized() const {

  return true;
}

void ChangeOpponentRequest::Swap(ChangeOpponentRequest* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(level_, other->level_);
    std::swap(direction_, other->direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeOpponentRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeOpponentRequest_descriptor_;
  metadata.reflection = ChangeOpponentRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeOpponentResponse::kUinFieldNumber;
const int ChangeOpponentResponse::kCodeFieldNumber;
const int ChangeOpponentResponse::kOpponentsFieldNumber;
const int ChangeOpponentResponse::kBattleFieldFieldNumber;
#endif  // !_MSC_VER

ChangeOpponentResponse::ChangeOpponentResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeOpponentResponse::InitAsDefaultInstance() {
  battle_field_ = const_cast< ::SectBattle::BattleField*>(&::SectBattle::BattleField::default_instance());
}

ChangeOpponentResponse::ChangeOpponentResponse(const ChangeOpponentResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeOpponentResponse::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  code_ = 0;
  battle_field_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeOpponentResponse::~ChangeOpponentResponse() {
  SharedDtor();
}

void ChangeOpponentResponse::SharedDtor() {
  if (this != default_instance_) {
    delete battle_field_;
  }
}

void ChangeOpponentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeOpponentResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeOpponentResponse_descriptor_;
}

const ChangeOpponentResponse& ChangeOpponentResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sect_5fbattle_5fprotocol_2eproto();
  return *default_instance_;
}

ChangeOpponentResponse* ChangeOpponentResponse::default_instance_ = NULL;

ChangeOpponentResponse* ChangeOpponentResponse::New() const {
  return new ChangeOpponentResponse;
}

void ChangeOpponentResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    code_ = 0;
    if (has_battle_field()) {
      if (battle_field_ != NULL) battle_field_->::SectBattle::BattleField::Clear();
    }
  }
  opponents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeOpponentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional sint32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opponents;
        break;
      }

      // repeated uint32 opponents = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opponents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_opponents())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_opponents())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opponents;
        if (input->ExpectTag(34)) goto parse_battle_field;
        break;
      }

      // optional .SectBattle.BattleField battle_field = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_field()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeOpponentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional sint32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->code(), output);
  }

  // repeated uint32 opponents = 3;
  for (int i = 0; i < this->opponents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->opponents(i), output);
  }

  // optional .SectBattle.BattleField battle_field = 4;
  if (has_battle_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->battle_field(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeOpponentResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional sint32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->code(), target);
  }

  // repeated uint32 opponents = 3;
  for (int i = 0; i < this->opponents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->opponents(i), target);
  }

  // optional .SectBattle.BattleField battle_field = 4;
  if (has_battle_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->battle_field(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeOpponentResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional sint32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->code());
    }

    // optional .SectBattle.BattleField battle_field = 4;
    if (has_battle_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_field());
    }

  }
  // repeated uint32 opponents = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->opponents_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->opponents(i));
    }
    total_size += 1 * this->opponents_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeOpponentResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeOpponentResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeOpponentResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeOpponentResponse::MergeFrom(const ChangeOpponentResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  opponents_.MergeFrom(from.opponents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_battle_field()) {
      mutable_battle_field()->::SectBattle::BattleField::MergeFrom(from.battle_field());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeOpponentResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeOpponentResponse::CopyFrom(const ChangeOpponentResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeOpponentResponse::IsInitialized() const {

  if (has_battle_field()) {
    if (!this->battle_field().IsInitialized()) return false;
  }
  return true;
}

void ChangeOpponentResponse::Swap(ChangeOpponentResponse* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(code_, other->code_);
    opponents_.Swap(&other->opponents_);
    std::swap(battle_field_, other->battle_field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeOpponentResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeOpponentResponse_descriptor_;
  metadata.reflection = ChangeOpponentResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckFightRequest::kUinFieldNumber;
const int CheckFightRequest::kOpponentFieldNumber;
const int CheckFightRequest::kDirectionFieldNumber;
#endif  // !_MSC_VER

CheckFightRequest::CheckFightRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckFightRequest::InitAsDefaultInstance() {
}

CheckFightRequest::CheckFightRequest(const CheckFightRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckFightRequest::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  opponent_ = 0u;
  direction_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckFightRequest::~CheckFightRequest() {
  SharedDtor();
}

void CheckFightRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckFightRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckFightRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckFightRequest_descriptor_;
}

const CheckFightRequest& CheckFightRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sect_5fbattle_5fprotocol_2eproto();
  return *default_instance_;
}

CheckFightRequest* CheckFightRequest::default_instance_ = NULL;

CheckFightRequest* CheckFightRequest::New() const {
  return new CheckFightRequest;
}

void CheckFightRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    opponent_ = 0u;
    direction_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckFightRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opponent;
        break;
      }

      // optional uint32 opponent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opponent_)));
          set_has_opponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_direction;
        break;
      }

      // optional uint32 direction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckFightRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional uint32 opponent = 2;
  if (has_opponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opponent(), output);
  }

  // optional uint32 direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->direction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckFightRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional uint32 opponent = 2;
  if (has_opponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opponent(), target);
  }

  // optional uint32 direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->direction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckFightRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional uint32 opponent = 2;
    if (has_opponent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opponent());
    }

    // optional uint32 direction = 3;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->direction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckFightRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckFightRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckFightRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckFightRequest::MergeFrom(const CheckFightRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_opponent()) {
      set_opponent(from.opponent());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckFightRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckFightRequest::CopyFrom(const CheckFightRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckFightRequest::IsInitialized() const {

  return true;
}

void CheckFightRequest::Swap(CheckFightRequest* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(opponent_, other->opponent_);
    std::swap(direction_, other->direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckFightRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckFightRequest_descriptor_;
  metadata.reflection = CheckFightRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckFightResponse::kUinFieldNumber;
const int CheckFightResponse::kCodeFieldNumber;
const int CheckFightResponse::kBattleFieldFieldNumber;
#endif  // !_MSC_VER

CheckFightResponse::CheckFightResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckFightResponse::InitAsDefaultInstance() {
  battle_field_ = const_cast< ::SectBattle::BattleField*>(&::SectBattle::BattleField::default_instance());
}

CheckFightResponse::CheckFightResponse(const CheckFightResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckFightResponse::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  code_ = 0;
  battle_field_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckFightResponse::~CheckFightResponse() {
  SharedDtor();
}

void CheckFightResponse::SharedDtor() {
  if (this != default_instance_) {
    delete battle_field_;
  }
}

void CheckFightResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckFightResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckFightResponse_descriptor_;
}

const CheckFightResponse& CheckFightResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sect_5fbattle_5fprotocol_2eproto();
  return *default_instance_;
}

CheckFightResponse* CheckFightResponse::default_instance_ = NULL;

CheckFightResponse* CheckFightResponse::New() const {
  return new CheckFightResponse;
}

void CheckFightResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    code_ = 0;
    if (has_battle_field()) {
      if (battle_field_ != NULL) battle_field_->::SectBattle::BattleField::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckFightResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional sint32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_battle_field;
        break;
      }

      // optional .SectBattle.BattleField battle_field = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_field()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckFightResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional sint32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->code(), output);
  }

  // optional .SectBattle.BattleField battle_field = 3;
  if (has_battle_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battle_field(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckFightResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional sint32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->code(), target);
  }

  // optional .SectBattle.BattleField battle_field = 3;
  if (has_battle_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battle_field(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckFightResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional sint32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->code());
    }

    // optional .SectBattle.BattleField battle_field = 3;
    if (has_battle_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_field());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckFightResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckFightResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckFightResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckFightResponse::MergeFrom(const CheckFightResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_battle_field()) {
      mutable_battle_field()->::SectBattle::BattleField::MergeFrom(from.battle_field());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckFightResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckFightResponse::CopyFrom(const CheckFightResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckFightResponse::IsInitialized() const {

  if (has_battle_field()) {
    if (!this->battle_field().IsInitialized()) return false;
  }
  return true;
}

void CheckFightResponse::Swap(CheckFightResponse* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(code_, other->code_);
    std::swap(battle_field_, other->battle_field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckFightResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckFightResponse_descriptor_;
  metadata.reflection = CheckFightResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportFightRequest::kUinFieldNumber;
const int ReportFightRequest::kOpponentFieldNumber;
const int ReportFightRequest::kLoserFieldNumber;
const int ReportFightRequest::kDirectionFieldNumber;
const int ReportFightRequest::kResetSelfFieldNumber;
const int ReportFightRequest::kResetOpponentFieldNumber;
const int ReportFightRequest::kLevelFieldNumber;
const int ReportFightRequest::kOpponentLevelFieldNumber;
#endif  // !_MSC_VER

ReportFightRequest::ReportFightRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportFightRequest::InitAsDefaultInstance() {
}

ReportFightRequest::ReportFightRequest(const ReportFightRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportFightRequest::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  opponent_ = 0u;
  loser_ = 0u;
  direction_ = 0u;
  reset_self_ = false;
  reset_opponent_ = false;
  level_ = 0u;
  opponent_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportFightRequest::~ReportFightRequest() {
  SharedDtor();
}

void ReportFightRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportFightRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportFightRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportFightRequest_descriptor_;
}

const ReportFightRequest& ReportFightRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sect_5fbattle_5fprotocol_2eproto();
  return *default_instance_;
}

ReportFightRequest* ReportFightRequest::default_instance_ = NULL;

ReportFightRequest* ReportFightRequest::New() const {
  return new ReportFightRequest;
}

void ReportFightRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    opponent_ = 0u;
    loser_ = 0u;
    direction_ = 0u;
    reset_self_ = false;
    reset_opponent_ = false;
    level_ = 0u;
    opponent_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportFightRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opponent;
        break;
      }

      // optional uint32 opponent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opponent_)));
          set_has_opponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_loser;
        break;
      }

      // optional uint32 loser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loser_)));
          set_has_loser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_direction;
        break;
      }

      // optional uint32 direction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reset_self;
        break;
      }

      // optional bool reset_self = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset_self:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_self_)));
          set_has_reset_self();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_reset_opponent;
        break;
      }

      // optional bool reset_opponent = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset_opponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_opponent_)));
          set_has_reset_opponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional uint32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_opponent_level;
        break;
      }

      // optional uint32 opponent_level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opponent_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opponent_level_)));
          set_has_opponent_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportFightRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional uint32 opponent = 2;
  if (has_opponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opponent(), output);
  }

  // optional uint32 loser = 3;
  if (has_loser()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->loser(), output);
  }

  // optional uint32 direction = 4;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->direction(), output);
  }

  // optional bool reset_self = 5;
  if (has_reset_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->reset_self(), output);
  }

  // optional bool reset_opponent = 6;
  if (has_reset_opponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->reset_opponent(), output);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }

  // optional uint32 opponent_level = 8;
  if (has_opponent_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->opponent_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportFightRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional uint32 opponent = 2;
  if (has_opponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opponent(), target);
  }

  // optional uint32 loser = 3;
  if (has_loser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->loser(), target);
  }

  // optional uint32 direction = 4;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->direction(), target);
  }

  // optional bool reset_self = 5;
  if (has_reset_self()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->reset_self(), target);
  }

  // optional bool reset_opponent = 6;
  if (has_reset_opponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->reset_opponent(), target);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->level(), target);
  }

  // optional uint32 opponent_level = 8;
  if (has_opponent_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->opponent_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportFightRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional uint32 opponent = 2;
    if (has_opponent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opponent());
    }

    // optional uint32 loser = 3;
    if (has_loser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loser());
    }

    // optional uint32 direction = 4;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->direction());
    }

    // optional bool reset_self = 5;
    if (has_reset_self()) {
      total_size += 1 + 1;
    }

    // optional bool reset_opponent = 6;
    if (has_reset_opponent()) {
      total_size += 1 + 1;
    }

    // optional uint32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 opponent_level = 8;
    if (has_opponent_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opponent_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportFightRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportFightRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportFightRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportFightRequest::MergeFrom(const ReportFightRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_opponent()) {
      set_opponent(from.opponent());
    }
    if (from.has_loser()) {
      set_loser(from.loser());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_reset_self()) {
      set_reset_self(from.reset_self());
    }
    if (from.has_reset_opponent()) {
      set_reset_opponent(from.reset_opponent());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_opponent_level()) {
      set_opponent_level(from.opponent_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportFightRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportFightRequest::CopyFrom(const ReportFightRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportFightRequest::IsInitialized() const {

  return true;
}

void ReportFightRequest::Swap(ReportFightRequest* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(opponent_, other->opponent_);
    std::swap(loser_, other->loser_);
    std::swap(direction_, other->direction_);
    std::swap(reset_self_, other->reset_self_);
    std::swap(reset_opponent_, other->reset_opponent_);
    std::swap(level_, other->level_);
    std::swap(opponent_level_, other->opponent_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportFightRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportFightRequest_descriptor_;
  metadata.reflection = ReportFightRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportFightResponse::kUinFieldNumber;
const int ReportFightResponse::kCodeFieldNumber;
const int ReportFightResponse::kBattleFieldFieldNumber;
#endif  // !_MSC_VER

ReportFightResponse::ReportFightResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportFightResponse::InitAsDefaultInstance() {
  battle_field_ = const_cast< ::SectBattle::BattleField*>(&::SectBattle::BattleField::default_instance());
}

ReportFightResponse::ReportFightResponse(const ReportFightResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportFightResponse::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  code_ = 0u;
  battle_field_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportFightResponse::~ReportFightResponse() {
  SharedDtor();
}

void ReportFightResponse::SharedDtor() {
  if (this != default_instance_) {
    delete battle_field_;
  }
}

void ReportFightResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportFightResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportFightResponse_descriptor_;
}

const ReportFightResponse& ReportFightResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sect_5fbattle_5fprotocol_2eproto();
  return *default_instance_;
}

ReportFightResponse* ReportFightResponse::default_instance_ = NULL;

ReportFightResponse* ReportFightResponse::New() const {
  return new ReportFightResponse;
}

void ReportFightResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    code_ = 0u;
    if (has_battle_field()) {
      if (battle_field_ != NULL) battle_field_->::SectBattle::BattleField::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportFightResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional uint32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_battle_field;
        break;
      }

      // optional .SectBattle.BattleField battle_field = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_field()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportFightResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional uint32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->code(), output);
  }

  // optional .SectBattle.BattleField battle_field = 3;
  if (has_battle_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battle_field(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportFightResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional uint32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->code(), target);
  }

  // optional .SectBattle.BattleField battle_field = 3;
  if (has_battle_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battle_field(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportFightResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional uint32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code());
    }

    // optional .SectBattle.BattleField battle_field = 3;
    if (has_battle_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_field());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportFightResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportFightResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportFightResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportFightResponse::MergeFrom(const ReportFightResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_battle_field()) {
      mutable_battle_field()->::SectBattle::BattleField::MergeFrom(from.battle_field());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportFightResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportFightResponse::CopyFrom(const ReportFightResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportFightResponse::IsInitialized() const {

  if (has_battle_field()) {
    if (!this->battle_field().IsInitialized()) return false;
  }
  return true;
}

void ReportFightResponse::Swap(ReportFightResponse* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(code_, other->code_);
    std::swap(battle_field_, other->battle_field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportFightResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportFightResponse_descriptor_;
  metadata.reflection = ReportFightResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SectBattle

// @@protoc_insertion_point(global_scope)
