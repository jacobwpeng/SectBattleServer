package SectBattle;

message ProtocolMessage {
    optional bytes name = 1;
    optional bytes payload = 2;
}

message PBPos {
    required int32 x = 1;
    required int32 y = 2;
}

message PBField {
    optional uint32 owner = 1;
    optional uint32 garrison_num = 2;
}

message BattleField {
    optional PBPos self_position = 1;
    repeated PBField field = 2; //如果还需要再压缩包大小可以把这个拆成两个repeated packed
}

message QueryBattleFieldRequest {
    optional uint32 uin = 1;
    optional uint32 level = 2;
}

message QueryBattleFieldResponse {
    optional uint32 uin = 1;
    optional sint32 code = 2;
    optional BattleField battle_field = 3;
}

message JoinBattleRequest {
    optional uint32 uin = 1;
    optional uint32 level = 2;
}

message JoinBattleResponse {
    optional uint32 uin = 1;
    optional sint32 code = 2; 
    optional uint32 sect = 3;
    optional BattleField battle_field = 4;
}

message MoveRequest {
    optional uint32 uin = 1;
    optional uint32 level = 2;
    optional uint32 direction = 3;
    optional bool can_move = 4;
    optional PBPos destination = 5;
}

message MoveResponse {
    optional uint32 uin = 1;
    optional sint32 code = 2;
    repeated uint32 opponents = 3;
    optional BattleField battle_field = 4;
}

message ChangeSectRequest {
    optional uint32 uin = 1;
    optional uint32 level = 2;
    optional uint32 sect = 3;
}

message ChangeSectResponse {
    optional uint32 uin = 1;
    optional sint32 code = 2;
    optional BattleField battle_field = 3;
}

message ChangeOpponentRequest {
    optional uint32 uin = 1;
    optional uint32 level = 2;
    optional uint32 direction = 3;
}

message ChangeOpponentResponse {
    optional uint32 uin = 1;
    optional sint32 code = 2;
    repeated uint32 opponents = 3;
    optional BattleField battle_field = 4;
}

message CheckFightRequest {
    optional uint32 uin = 1;
    optional uint32 opponent = 2; 
    optional uint32 direction = 3;
}

message CheckFightResponse {
    optional uint32 uin = 1;
    optional sint32 code = 2;
    optional BattleField battle_field = 3;
    optional uint32 sect = 4;
}

message ReportFightRequest {
    optional uint32 uin = 1;
    optional uint32 opponent = 2;
    optional uint32 loser = 3;
    optional uint32 direction = 4;
    optional bool reset_self = 5;
    optional bool reset_opponent = 6;
    optional uint32 level = 7;
    optional uint32 opponent_level = 8;
}

message ReportFightResponse {
    optional uint32 uin = 1;
    optional uint32 code = 2;
    optional BattleField battle_field = 3;
}
